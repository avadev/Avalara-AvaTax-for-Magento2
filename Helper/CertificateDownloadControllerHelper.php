<?php
/**
 * ClassyLlama_AvaTax
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @copyright  Copyright (c) 2018 Avalara, Inc.
 * @license    http://opensource.org/licenses/osl-3.0.php Open Software License (OSL 3.0)
 */

namespace ClassyLlama\AvaTax\Helper;

use Magento\Framework\Exception\NotFoundException;
use Magento\Framework\App\RequestInterface;
use Magento\Customer\Api\CustomerRepositoryInterface;
use ClassyLlama\AvaTax\Api\RestCustomerInterface;
use Magento\Framework\DataObjectFactory;
use Magento\Framework\Controller\Result\RawFactory;
use Magento\Framework\Controller\Result\Raw as RawResult;
use Magento\Customer\Model\Data\Customer;
use Psr\Log\LoggerInterface;

/**
 * Class CertificateDownloadControllerHelper
 * @package ClassyLlama\AvaTax\Helper
 */
class CertificateDownloadControllerHelper
{
    /**
     * @var RequestInterface
     */
    protected $request;

    /**
     * @var UrlSigner
     */
    protected $urlSigner;

    /**
     * @var CustomerRepositoryInterface
     */
    protected $customerRepository;

    /**
     * @var RestCustomerInterface
     */
    protected $customerRest;

    /**
     * @var DataObjectFactory
     */
    protected $dataObjectFactory;

    /**
     * @var RawFactory
     */
    protected $resultRawFactory;

    /**
     * @var LoggerInterface
     */
    private $logger;

    /**
     * CertificateDownloadControllerHelper constructor.
     * @param LoggerInterface $logger
     * @param RequestInterface $request
     * @param UrlSigner $urlSigner
     * @param CustomerRepositoryInterface $customerRepository
     * @param RestCustomerInterface $customerRest
     * @param RawFactory $resultRawFactory
     * @param DataObjectFactory $dataObjectFactory
     */
    public function __construct(
        LoggerInterface $logger,
        RequestInterface $request,
        UrlSigner $urlSigner,
        CustomerRepositoryInterface $customerRepository,
        RestCustomerInterface $customerRest,
        RawFactory $resultRawFactory,
        DataObjectFactory $dataObjectFactory
    ) {
        $this->logger = $logger;
        $this->request = $request;
        $this->urlSigner = $urlSigner;
        $this->customerRepository = $customerRepository;
        $this->customerRest = $customerRest;
        $this->dataObjectFactory = $dataObjectFactory;
        $this->resultRawFactory = $resultRawFactory;
    }

    /**
     * Get document certificate
     *
     * @return RawResult|\Magento\Framework\DataObject|null
     * @throws NotFoundException
     */
    public function getDownloadRawResult()
    {
        $customerId = (int)$this->request->getParam('customer_id');
        $certificateId = (int)$this->request->getParam('certificate_id');
        $expires = (int)$this->request->getParam('expires');
        $signature = (string)$this->request->getParam('signature');
        $storeId = null;

        /**
         * These parameters involved in a certificate signature creation process
         */
        $parameters = [
            'certificate_id' => $certificateId,
            'customer_id' => $customerId,
            'expires' => $expires
        ];

        // Ensure that this was a valid request generated by the system
        if (time() > $expires || $signature !== $this->urlSigner->signParameters($parameters)) {
            throw new NotFoundException(__('No certificate found'));
        }

        // If we have specified a customer ID, use the store that user is associated with, otherwise default to session
        if (null !== $customerId) {
            try {
                /** @var Customer $customerModel */
                $customerModel = $this->customerRepository->getById($customerId);
                $storeId = (int)$customerModel->getStoreId();
            } catch (\Throwable $exception) {
                $this->logger->error($exception->getMessage(), ['class' => self::class, $exception->getTraceAsString()]);
            }
        }

        try {
            /** @var string|null $certificateStream */
            $certificateStream = $this->customerRest->downloadCertificate(
                $this->dataObjectFactory->create(['data' => ['id' => $certificateId]]),
                null,
                $storeId
            );
            if (null !== $certificateStream) {
                /** @var RawResult $resultRaw */
                $resultRaw = $this->resultRawFactory->create();
                $resultRaw->setHeader('Content-type', 'application/pdf', true)->setHeader(
                    'Content-Disposition',
                    'inline; filename="certificate.pdf"',
                    true
                )->setContents($certificateStream); //set content for download file here
                return $resultRaw;
            }
            return null;
        } catch (\Throwable $exception) {
            /** @var array $errorData */
            $errorData = [
                'class' => self::class,
                'trace' => $exception->getTraceAsString(),
                'error_message' => $exception->getMessage(),
                'code' => $exception->getCode()
            ];
            $this->logger->error($exception->getMessage(), $errorData);
            /** @var \Magento\Framework\DataObject $error */
            $error = $this->dataObjectFactory->create();
            $error->setData('error', $errorData);
            return $error;
        }
    }
}